setwd("~/Google Drive/[Università e Corsi]/Università/Master II Livello/[COMPLETATI]/Statistica/Esame/Consegna/R code")
#############################################
# Packages
load("Screening_pt2.RData")
MTP.summary
# Estrazione (del nome) delle variabili individuate durante la fase di screening
X.red <- summary.pval %>%
filter(Benjamin.Hochberg == "reject H0") %>%
pull(Var) %>% as.character
X.red <- summary.pval %>%
filter(Benjamin.Hochberg == "reject H0") %>%
pull(Var) %>% as.character
install.packages("e1071")
install.packages("glmnet")
install.packages("caret")
library("tibble")
library("dplyr")
library("glmnet")
library("caret")
X.red <- summary.pval %>%
filter(Benjamin.Hochberg == "reject H0") %>%
pull(Var) %>% as.character
X.red
var.red <- summary.pval %>%
filter(Benjamin.Hochberg == "reject H0") %>%
pull(Var) %>% as.character
# Estrazione degli identificatori di colonna (boolean) della matrice ridotta
id.red <- is.element(colnames(X), var.red)     # Verifica la presenza del gene all'interno di X.
# Se esiste, ID = TRUE, viceversa ID = FALSE.
# Design Matrix
X.red <- as.matrix(X[, id.red])
dim(X.red)
X.red
p <- ncol(X.red)                # Numero di predittori totali
npar <- out.lasso$df + 1        # Numero di parametri stimati
lambda <- out.lasso$lambda      # Estrazione dei parametri di tuning
nlambda <- length(lambda)       # Numero dei parametri di tuning
# Lasso Regression
out.lasso <- glmnet(x = X.red, y = y, family = "binomial", alpha = 1)    # alpha = 1 -> per Lasso
# Parametri
p <- ncol(X.red)                # Numero di predittori totali
npar <- out.lasso$df + 1        # Numero di parametri stimati
lambda <- out.lasso$lambda      # Estrazione dei parametri di tuning
nlambda <- length(lambda)       # Numero dei parametri di tuning
p
npar
out.lasso$df
out.lasso
out.lasso
dim(X.red)
IC.lasso <- matrix(0, nrow = nlambda, ncol = 5)
colnames(IC.lasso) <- c("AIC", "AICc", "GIC", "BIC", "BICg")
IC.lasso[, "AIC"]  <- deviance(out.lasso) + 2 * npar
IC.lasso[, "AICc"] <- deviance(out.lasso) + 2 * npar * n / (n - npar - 1)
IC.lasso[, "GIC"]  <- deviance(out.lasso) + npar * log(log(n)) * log(p)
IC.lasso[, "BIC"]  <- deviance(out.lasso) + log(n) * npar
g <- 0.5
IC.lasso[, "BICg"] <-  deviance(out.lasso) + log(n) * npar + 2 * npar * g * log(p)
IC.lasso
# Costruzione della matrice contenente le misure delle bontà di adattamento
IC.lasso <- matrix(0, nrow = nlambda, ncol = 5)
IC.lasso["AIC"]  <- deviance(out.lasso) + 2 * npar
IC.lasso[, "AIC"]  <- deviance(out.lasso) + 2 * npar
# Costruzione della matrice contenente le misure delle bontà di adattamento
IC.lasso <- matrix(0, nrow = nlambda, ncol = 5)
IC.lasso
summary.pval
IC.lasso[, "AIC"]  <- deviance(out.lasso) + 2 * npar
IC.lasso[, "AICc"] <- deviance(out.lasso) + 2 * npar * n / (n - npar - 1)
IC.lasso[, "GIC"]  <- deviance(out.lasso) + npar * log(log(n)) * log(p)
IC.lasso[, "BIC"]  <- deviance(out.lasso) + log(n) * npar
g <- 0.5
IC.lasso[, "BICg"] <-  deviance(out.lasso) + log(n) * npar + 2 * npar * g * log(p)
# Identificazione dei valori ottimi del parametro di tuning
lambda.opt.IC <- out.lasso$lambda[apply(IC.lasso, 2L, which.min)]   # Si selezionano i lambda minimi per i 5 metodi
lambda.opt.IC
names(lambda.opt.IC) <- colnames(IC.lasso)
lambda.opt.IC
# Identificazione dei valori ottimi del parametro di tuning
lambda.opt.IC <- out.lasso$lambda[apply(IC.lasso, 2L, which.min)]   # Si selezionano i lambda minimi per i 5 metodi
# Stima dell'insieme A_hat
A.hat.lasso.IC <- predict(out.lasso, type = "nonzero", s = lambda.opt.IC)
names(A.hat.lasso.IC) <- colnames(IC.lasso)
lambda.opt.IC <- out.lasso$lambda[apply(IC.lasso, 2L, which.min)]   # Si selezionano i lambda minimi per i 5 metodi
#names(lambda.opt.IC) <- colnames(IC.lasso)
# Stima dell'insieme A_hat
A.hat.lasso.IC <- predict(out.lasso, type = "nonzero", s = lambda.opt.IC)
#names(A.hat.lasso.IC) <- colnames(IC.lasso)
# Variabili selezionate
nms.IC <- lapply(A.hat.lasso.IC, function(id) names(out.lasso$beta[, 1L])[id])
# Numero di variabili selezionate
df.IC <- sapply(A.hat.lasso.IC, length)    # Calcola la lunghezza (delle l
df.IC
source("~/Google Drive/[Università e Corsi]/Università/Master II Livello/[COMPLETATI]/Statistica/Esame/Consegna/R code/3_Sparse_Inference.R", echo=TRUE)
install.packages("glmnet")
install.packages("caret")
